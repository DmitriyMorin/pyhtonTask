# # task 1
# n = 20
# m = 21
# t = 22
# a = n + (m + 1) + t
# print(a // 2)

# 5. Вагоны в электричке пронумерованы натуральными числами, начиная с 1
# (при этом иногда вагоны нумеруются от «головы» поезда, а иногда – с «хвоста»;
# это зависит от того, в какую сторону едет электричка). В каждом вагоне написан
# его номер. Витя сел в i-й вагон от головы поезда и обнаружил, что его вагон имеет номер j.
# Он хочет определить, сколько всего вагонов в электричке. Напишите программу, которая будет
# это делать или сообщать, что без дополнительной информации это сделать невозможно.

# i = int(input('i = '))
# j = int(input('j = '))
# if i == j:
#     print('Мало данных')
# else:
#     print(i + j - 1)

# task 7
# n = 2016
# if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:
#     print('yes')
# else:
#     print('no')

# По данному целому неотрицательному n вычислите значение
# n!. N! = 1 * 2 * 3 * … * N (произведение всех чисел от 1 до N) 0! = 1
# Решить задачу используя цикл while

# n = int(input())
# i = 1
# res = 1
# while i <= n:
#     res *= i
#     i += 1 # i = i + 1
# print(res)

# Дано натуральное число A > 1. Определите, каким по счету числом Фибоначчи
# оно является, то есть выведите такое число n, что φ(n)=A. Если А не является числом Фибоначчи,
# выведите число -1
# 0 1 1 2 3 5 8 13 21
# 0 1 1 2 3 5 8 13 21

# n = int(input())
# n0 = 0
# n1 = 0 # 1 член последовательности
# n2 = 1 # 2 член последовательности
# i = 2

# while n0 < n:
#     n0 = n1 + n2
#     n1 = n2
#     n2 = n0
#     i += 1
# if n0 > n:
#     i = -1

# print(i)


# Уставшие от необычно теплой зимы, жители решили узнать, действительно ли это самая
# длинная оттепель за всю историю наблюдений за погодой. Они обратились к синоптикам, а те,
# в свою очередь, занялись исследованиями статистики за прошлые годы. Их интересует, сколько
# дней длилась самая длинная оттепель. Оттепелью они называют период, в который среднесуточная
# температура ежедневно превышала 0 градусов Цельсия. Напишите программу, помогающую синоптикам
# в работе.
# Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100). В следующих
# строках располагается N целых чисел. Каждое число – среднесуточная температура в соответствующий
# день. Температуры – целые числа и лежат в диапазоне от –50 до 50
# 20 30 -40 50 10 -10

# n = int(input())
# k = 0
# max = 0
# for i in range(n):
#     x = int(input())
#     if x > 0:
#         k += 1
#     else:
#         max = k
#         k = 0
#     if max < k:
#         max = k
# print(max)

# Иван Васильевич пришел на рынок и решил купить два арбуза: один для себя,
# а другой для тещи. Понятно, что для себя нужно выбрать арбуз потяжелей, а для тещи полегче.
# Но вот незадача: арбузов слишком много и он не знает как же выбрать самый легкий и самый тяжелый арбуз? Помогите ему!
# Пользователь вводит одно число N – количество арбузов. Вторая строка содержит N чисел,
# записанных на новой строчке каждое. Здесь каждое число – это масса соответствующего арбуза.
# Все числа натуральные и не превышают 3000
# 5 -> 5 1 6 5 9
# n = int(input()) # количество арбузов
# max = -1
# min = 3001
# for i in range(n):
#     x = int(input())
#     if x > max:
#         max = x
#     if x < min:
#         min = x
# print('max=',max)
# print('min=',min)


# Дан список чисел. Определите, сколько в нем встречается различных чисел.
# Input: [1, 1, 2, 0, -1, 3, 4, 4]
# Output: 6

# list1 = [1, 1, 2, 0, -1, 3, 4, 4]
# print(len(set(list1)))

# 19. Дана последовательность из N целых чисел и число K. Необходимо сдвинуть
# всю последовательность (сдвиг - циклический) на K элементов вправо,
# K – положительное число.

# Input: [1, 2, 3, 4, 5] k = 2
# Output: [4, 5, 1, 2, 3]

# list1 = [1, 2, 3, 4, 5]
# list2 = []
# k = 2

# for i in range(k):
#     list2.append(list1[len(list1) - i - 1])
#     list2 = list2[::-1]

# for i in range(len(list1) - k):
#     list2.append(list1[i])

# print(list2)

# Напишите программу для печати всех уникальных значений в словаре.
# Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"},
# {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}

# list1 = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {" V ":"S009"}, {" VIII ":"S007"}]
# result_set = set()
# for i in list1:
#     for k, v in i.items():
#         result_set.add(v)
# print(result_set)

# 23. Дан массив, состоящий из целых чисел. Напишите программу, которая
# подсчитает количество элементов массива, больших предыдущего (элемента с предыдущим номером)
# Input: [0, -1, 5, 2, 3]
# Output: 2 (-1 < 5, 2 < 3)

# count = 0
# list1= [0, -1, 5, 2, 3]
# for i in range(len(list1)-1):
#     if list1[i]<list1[i+1]:
#         count = count+1
# print(count)

# Быстрая сортировка

# def quick_sort(array):
#     if len(array) <= 1:
#         return array
#     else:
#         pivot = array(0)
#     less = [i for i in array[1:] if i <= pivot]
#     greater = [i for i in array[1:] if i > pivot]
#     return quick_sort(less) + [pivot] + quick_sort(greater)


# Сорторовка слияниия

# def merge_sort(array):
#     if len(array) > 1:
#         mid = len(array) // 2
#         left = array[:mid]
#         right = array[mid:]
#         merge_sort(left)
#         merge_sort(right)
#         i = j = k = 0
#         while i < len(left) and j < len(right):
#             if left[i] < right[j]:
#                 array[k] = left[i]
#                 i += 1
#             else:
#                 array[k] = right[j]
#                 j += 1
#             k += 1
#         while i < len(left):
#             array[k] = left[i]
#             i += 1
#             k += 1
#         while j < len(right):
#             array[k] = right[j]
#             j += 1
#             k += 1
# list1 = [2, 3, 1, 34, 45, 3, 1 ,6, 7,]
# merge_sort(list1)
# print(list1)

# Напишите программу, которая принимает на вход строку, и отслеживает, 
# сколько раз каждый символ уже встречался. Количество повторов добавляется 
# к символам с помощью постфикса формата _n.
# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2
# Для решения данной задачи используйте функцию .split()

# string1 = input("Enter the words: ").split()
# dict1 = {}
# for i in string1:
#     if i in dict1:
#         print(f"{i}_{dict1[i]}", end = ' ')
#     else:
#         print(i, end = ' ')
#     dict1[i] = dict1.get(i, 0) + 1

# Пользователь вводит текст(строка). 
# Словом считается последовательность непробельных символов идущих подряд,
# слова разделены одним или большим числом пробелов. 
# Определите, сколько различных слов содержится в этом тексте.
# Input: She sells sea shells on the sea shore 
# The shells that she sells are sea shells I'm sure.
# So if she sells sea shells on the sea shore I'm sure that the shells are sea shore shells
# Output: 13

# string2 = input().split()
# result_set = set()
# for i in string2:
#     result_set.add(i)
# print(len(result_set))


# Ваня и Петя поспорили, кто быстрее решит следующую задачу: 
# “Задана последовательность неотрицательных целых чисел.
# Требуется определить значение наибольшего элемента последовательности, 
# которая завершается первым встретившимся нулем 
# (число 0 не входит в последовательность)”. 
# Однако 2 друга оказались не такими смышлеными. 
# Никто из ребят не смог до конца сделать это задание. 
# Они решили так: у кого будет меньше ошибок в коде, тот и выиграл спор. 
# За помощью товарищи обратились к Вам, студентам.

# n = int(input())
# max_n = n
# while n != 0:
#     n = int(input())
#     if n > max_n:
#         max_n = n
# print(max_n)

# 31.Последовательностью Фибоначчи называется последовательность чисел a0, a1, ..., an, ..., где
# a0 = 0, a1 = 1, ak = ak-1 + ak-2 (k > 1).
# Требуется найти N-е число Фибоначчи
# Input: 7
# Output: 21
# Задание необходимо решать через рекурсию

# def f(n):
#     if n == 0 or n == 1:
#         return n
#     return f(n - 1) + f(n - 2)

# n = int(input())
# print(f(n))

# Хакер Василий получил доступ к классному журналу и хочет заменить
# все свои минимальные оценки на максимальные. Напишите программу, которая
# заменяет оценки Василия, но наоборот: все максимальные – на минимальные.
# Input: 5 -> 1 3 3 3 4
# Output: 1 3 3 3 1

# n = int(input('Введите количество оценок '))
# list1 = [int(input()) for i in range(n)]
# print(list1)
# maxM = 0
# minM = list1[0]
# for i in list1:
#     if i>maxM:
#         maxM=i
#     if i<minM:
#         minM=i
# for i in range(len(list1)):
#     if list1[i]==maxM:
#         list1[i]=minM
# print(list1)

# list1 = [int(i) for i in input().split()]
# max_n = max(list1)
# min_n = min(list1)
# list1 = [min_n if list1[i] == max_n else list1[i] for i in range(len(list1))]
# print(list1)

# Метод флажка 
# list1 = [1, 2, 3, 4]
# flag = True
# i = 0
# while flag:
#     if list1[i] == 2:
#         flag = False
#     print(list1[i])
#     i += 1

# Напишите функцию, которая принимает одно число и проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое имеет 2 делителя: 1 и n(само число)
# Input: 5
# Output: yes

# def prime(n):
#     i = 2
#     flag = True
#     while i < n and flag:
#         if n % i == 0:
#             flag = False
#         i += 1
#         if flag:
#             return 'yes'
#         return 'no'
# print(prime(int(input())))

# Дано натуральное число N и последовательность из N элементов.
# Требуется вывести эту последовательность в обратном порядке.
# Примечание. В программе запрещается объявлять массивы и использовать циклы (даже для ввода и вывода).
# Input: 2 -> 3 4
# Output: 4 3

# def f(n):
#     if n==0:
#         return ''
#     k=int(input())
#     return f(n-1)+f' {str(k)}'

# n = int(input('введите число n '))
# print(f(n))

# Даны два массива чисел. Требуется вывести те элементы первого массива 
# (в том порядке, в каком они идут в первом массиве), 
# которых нет во втором массиве. Пользователь вводит число N - количество элементов в
# первом массиве, затем N чисел - элементы массива. 
# Затем число M - количество элементов во втором массиве.
# Затем элементы второго массива

# list1 = [int(input()) for i in range(int(input()))]
# list2 = [int(input()) for i in range(int(input()))]
# list3 = [i for i in list1 if i not in list2]
# print(*list1)
# print(*list2)
# print(*list3)

# Дан массив, состоящий из целых чисел. 
# Напишите программу, которая в данном массиве определит количество элементов,
# у которых два соседних и, при этом, оба соседних элемента меньше данного. 
# Сначала вводится число N — количество элементов в массиве Далее записаны 
# N чисел — элементы массива. Массив состоит из целых чисел.

# list1 = [int(input()) for i in range(int(input()))]
# count = 0
# for i in range(1, len(list1)-1):
#     if list1[i] > list1[i-1] and list1[i] > list1[i+1]:
#         count +=1
# print(count)

# list1 = [int(input()) for i in range(int(input()))]
# count = 0
# for i in range(1, len(list1)-1):
#     if list1[i - 1] < list1[i] > list1[i + 1]:
#         count +=1
# print(count)

# Дан список чисел. Посчитайте, сколько в нем пар элементов, 
# равных друг другу. Считается, что любые два элемента, 
# равные друг другу образуют одну пару, которую необходимо посчитать. 
# Вводится список чисел. Все числа списка находятся на разных строках.

# list2 = [int(i) for i in input().split()]
# count = 0
# for i in range(len(list2)):
#     for j in range(i+1, len(list2)):
#         if list2[i] == list2[j]:
#             count += 1
# print(count)

# Два различных натуральных числа n и m называются дружественными, 
# если сумма делителей числа n (включая 1, но исключая само n) равна числу m и наоборот. 
# Например, 220 и 284 – дружественные числа. 
# По данному числу k выведите все пары дружественных чисел, 
# каждое из которых не превосходит k. 
# Программа получает на вход одно натуральное число k, не превосходящее 105. 
# Программа должна вывести все пары дружественных чисел, каждое из которых не превосходит k. 
# Пары необходимо выводить по одной в строке, разделяя пробелами. 
# Каждая пара должна быть выведена только один раз (перестановка чисел новую пару не дает).

# k = int(input('Введите число k: '))
# list_nums = []
# for i in range(k):
#     temp_sum = 0
#     for j in range(1, i // 2 + 1):
#         if i % j == 0:
#             temp_sum += j
#     list_nums.append(tuple([i, temp_sum]))



# for i in range(len(list_nums)):
#     for j in range(i, len(list_nums)):
#         if (i != j) and (list_nums[i][0] == list_nums[j][1]) and (list_nums[i][1] == list_nums[j][0]):
#             print(*list_nums[i])

# Функция map

# list1 = [i for i in range(0,20)]
# print(list1)
# # for i in range(len(list1)):
# # list1[i] += 10
# list1 = list(map(lambda x: x + 10, list1))
# print(list1)

# У вас есть код, который вы не можете менять
# (так часто бывает, когда код в глубине программы используется множество раз 
# и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений,
# а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.

# trasformation = lambda x: x
# values = [1, 23, 42, 'asdfg', True]
# transformed_values = list(map(trasformation, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')

# 49. Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь.
# Напишите функцию find_farthest_orbit(list_of_orbits), 
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, 
# зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты 
# самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел
#  - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, 
# где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: 
# сначала вычислить самую большую площадь эллипса, 
# а затем найти и сам эллипс, имеющий такую площадь.
# Гарантируется, что самая далекая планета ровно одна
# Пример ввода и вывода данных представлены на следующем слайде
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# Вывод:
# 2.5 10

# from math import pi

# def find_farthest_orbit(orbits):
# #orbits_temp = [ i for i in orbits if i[0] != i[1]]
# orbits_temp = list(filter(lambda x: x[0] != x[1], orbits)) тоже самое но с функцией
# #orbits_s = [ pi*i[0]*i[1] for i in orbits_temp]
# orbits_s = list(map(lambda i: pi*i[0]*i[1], orbits_temp)) тоже самое но с функцией
# max_index = orbits_s.index(max(orbits_s))
# return orbits_temp[max_index]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# Напишите функцию same_by(characteristic, objects), 
# которая проверяет, все ли объекты имеют одинаковое значение некоторой характеристики, 
# и возвращают True, если это так. 
# Если значение характеристики для разных объектов отличается - то False. 
# Для пустого набора объектов, функция должна возвращать True. 
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику.
# Ввод: Вывод:
# values = [0, 2, 10, 6] same
# if same_by(lambda x: x % 2, values):
# print(‘same’)
# else:
# print(‘different’)

# def same_by(characteristic, objects):
#     temp_list = [characteristic(i) for i in objects]
#     flag = True
#     for i in range(len(temp_list) - 1):
#         if temp_list[i] != temp_list[i+1]:
#             flag = False
#             return flag

# values = [0, 2, 1, 6]
# if same_by(lambda x: x % 2 == 0, values):
#     print('same')
# else:
#     print('different')


